//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.21006.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TERSApplication
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web.Ria.Data;
    using System.Windows.Ria;
    using System.Windows.Ria.Services;
    using TERSApplication.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace TERSApplication.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.Web.Ria.Data;
    using System.Windows.Ria;
    using System.Windows.Ria.Services;
    using System.Xml.Serialization;
    using TERSApplication.Web.Resources;
    
    
    public sealed partial class AuthenticationContext : global::System.Windows.Ria.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("TERSApplication-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The AuthenticationService data service URI.
        /// </param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetUser'.
        /// </summary>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'Login'.
        /// </summary>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'Logout'.
        /// </summary>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            QueryResult<User> EndLogin(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            QueryResult<User> EndLogout(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class EventReadOnly : Entity
    {
        
        private string _createdBy;
        
        private int _eventID;
        
        private string _eventName;
        
        private string _status;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnEventIDChanging(int value);
        partial void OnEventIDChanged();
        partial void OnEventNameChanging(string value);
        partial void OnEventNameChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventReadOnly()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.ValidateProperty("CreatedBy", value);
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.ValidateProperty("EventID", value);
                    this.OnEventIDChanging(value);
                    this.RaiseDataMemberChanging("EventID");
                    this._eventID = value;
                    this.RaiseDataMemberChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        [DataMember()]
        public string EventName
        {
            get
            {
                return this._eventName;
            }
            set
            {
                if ((this._eventName != value))
                {
                    this.ValidateProperty("EventName", value);
                    this.OnEventNameChanging(value);
                    this.RaiseDataMemberChanging("EventName");
                    this._eventName = value;
                    this.RaiseDataMemberChanged("EventName");
                    this.OnEventNameChanged();
                }
            }
        }
        
        [DataMember()]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.ValidateProperty("Status", value);
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        public override object GetIdentity()
        {
            return this._eventID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class EventType : Entity
    {
        
        private Nullable<DateTime> _createDate;
        
        private string _createdBy;
        
        private int _eventTypeID;
        
        private string _eventTypeName;
        
        private Nullable<DateTime> _modifyDate;
        
        private EntityCollection<Occurrence> _occurrences;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreateDateChanging(Nullable<DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreatedByChanging(string value);
        partial void OnCreatedByChanged();
        partial void OnEventTypeIDChanging(int value);
        partial void OnEventTypeIDChanged();
        partial void OnEventTypeNameChanging(string value);
        partial void OnEventTypeNameChanged();
        partial void OnModifyDateChanging(Nullable<DateTime> value);
        partial void OnModifyDateChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventType()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public Nullable<DateTime> CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.ValidateProperty("CreateDate", value);
                    this.OnCreateDateChanging(value);
                    this.RaiseDataMemberChanging("CreateDate");
                    this._createDate = value;
                    this.RaiseDataMemberChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(50)]
        public string CreatedBy
        {
            get
            {
                return this._createdBy;
            }
            set
            {
                if ((this._createdBy != value))
                {
                    this.ValidateProperty("CreatedBy", value);
                    this.OnCreatedByChanging(value);
                    this.RaiseDataMemberChanging("CreatedBy");
                    this._createdBy = value;
                    this.RaiseDataMemberChanged("CreatedBy");
                    this.OnCreatedByChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int EventTypeID
        {
            get
            {
                return this._eventTypeID;
            }
            set
            {
                if ((this._eventTypeID != value))
                {
                    this.ValidateProperty("EventTypeID", value);
                    this.OnEventTypeIDChanging(value);
                    this.RaiseDataMemberChanging("EventTypeID");
                    this._eventTypeID = value;
                    this.RaiseDataMemberChanged("EventTypeID");
                    this.OnEventTypeIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(100)]
        public string EventTypeName
        {
            get
            {
                return this._eventTypeName;
            }
            set
            {
                if ((this._eventTypeName != value))
                {
                    this.ValidateProperty("EventTypeName", value);
                    this.OnEventTypeNameChanging(value);
                    this.RaiseDataMemberChanging("EventTypeName");
                    this._eventTypeName = value;
                    this.RaiseDataMemberChanged("EventTypeName");
                    this.OnEventTypeNameChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                if ((this._modifyDate != value))
                {
                    this.ValidateProperty("ModifyDate", value);
                    this.OnModifyDateChanging(value);
                    this.RaiseDataMemberChanging("ModifyDate");
                    this._modifyDate = value;
                    this.RaiseDataMemberChanged("ModifyDate");
                    this.OnModifyDateChanged();
                }
            }
        }
        
        [Association("EventType_Occurrence", "EventTypeID", "EventTypeID")]
        [XmlIgnore()]
        public EntityCollection<Occurrence> Occurrences
        {
            get
            {
                if ((this._occurrences == null))
                {
                    this._occurrences = new EntityCollection<Occurrence>(this, "Occurrences", this.FilterOccurrences, this.AttachOccurrences, this.DetachOccurrences);
                }
                return this._occurrences;
            }
        }
        
        private void AttachOccurrences(Occurrence entity)
        {
            entity.EventType = this;
        }
        
        private void DetachOccurrences(Occurrence entity)
        {
            entity.EventType = null;
        }
        
        private bool FilterOccurrences(Occurrence entity)
        {
            return (entity.EventTypeID == this.EventTypeID);
        }
        
        public override object GetIdentity()
        {
            return this._eventTypeID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class Occurrence : Entity
    {
        
        private Nullable<int> _catalogID;
        
        private Nullable<int> _conversionInstructorID;
        
        private Nullable<int> _conversionScheduleID;
        
        private Nullable<DateTime> _createDate;
        
        private int _createdByEmpID;
        
        private Nullable<int> _daysBeforeSendingReminder;
        
        private string _description;
        
        private int _eventID;
        
        private EntityRef<EventType> _eventType;
        
        private int _eventTypeID;
        
        private Nullable<bool> _isAllDay;
        
        private string _locationName;
        
        private Nullable<int> _maxAttend;
        
        private Nullable<DateTime> _modifyDate;
        
        private int _occurrenceID;
        
        private string _occurrenceName;
        
        private Nullable<decimal> _orgNo;
        
        private string _recurrence;
        
        private EntityRef<Region> _region;
        
        private Nullable<int> _regionID;
        
        private string _reminderBody;
        
        private string _reminderSubject;
        
        private DateTime _scheduleFrom;
        
        private Nullable<DateTime> _scheduleTo;
        
        private Nullable<bool> _showVideoConf;
        
        private EntityRef<TrainingEvent> _trainingEvent;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCatalogIDChanging(Nullable<int> value);
        partial void OnCatalogIDChanged();
        partial void OnConversionInstructorIDChanging(Nullable<int> value);
        partial void OnConversionInstructorIDChanged();
        partial void OnConversionScheduleIDChanging(Nullable<int> value);
        partial void OnConversionScheduleIDChanged();
        partial void OnCreateDateChanging(Nullable<DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreatedByEmpIDChanging(int value);
        partial void OnCreatedByEmpIDChanged();
        partial void OnDaysBeforeSendingReminderChanging(Nullable<int> value);
        partial void OnDaysBeforeSendingReminderChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEventIDChanging(int value);
        partial void OnEventIDChanged();
        partial void OnEventTypeIDChanging(int value);
        partial void OnEventTypeIDChanged();
        partial void OnIsAllDayChanging(Nullable<bool> value);
        partial void OnIsAllDayChanged();
        partial void OnLocationNameChanging(string value);
        partial void OnLocationNameChanged();
        partial void OnMaxAttendChanging(Nullable<int> value);
        partial void OnMaxAttendChanged();
        partial void OnModifyDateChanging(Nullable<DateTime> value);
        partial void OnModifyDateChanged();
        partial void OnOccurrenceIDChanging(int value);
        partial void OnOccurrenceIDChanged();
        partial void OnOccurrenceNameChanging(string value);
        partial void OnOccurrenceNameChanged();
        partial void OnOrgNoChanging(Nullable<decimal> value);
        partial void OnOrgNoChanged();
        partial void OnRecurrenceChanging(string value);
        partial void OnRecurrenceChanged();
        partial void OnRegionIDChanging(Nullable<int> value);
        partial void OnRegionIDChanged();
        partial void OnReminderBodyChanging(string value);
        partial void OnReminderBodyChanged();
        partial void OnReminderSubjectChanging(string value);
        partial void OnReminderSubjectChanged();
        partial void OnScheduleFromChanging(DateTime value);
        partial void OnScheduleFromChanged();
        partial void OnScheduleToChanging(Nullable<DateTime> value);
        partial void OnScheduleToChanged();
        partial void OnShowVideoConfChanging(Nullable<bool> value);
        partial void OnShowVideoConfChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Occurrence()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public Nullable<int> CatalogID
        {
            get
            {
                return this._catalogID;
            }
            set
            {
                if ((this._catalogID != value))
                {
                    this.ValidateProperty("CatalogID", value);
                    this.OnCatalogIDChanging(value);
                    this.RaiseDataMemberChanging("CatalogID");
                    this._catalogID = value;
                    this.RaiseDataMemberChanged("CatalogID");
                    this.OnCatalogIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> ConversionInstructorID
        {
            get
            {
                return this._conversionInstructorID;
            }
            set
            {
                if ((this._conversionInstructorID != value))
                {
                    this.ValidateProperty("ConversionInstructorID", value);
                    this.OnConversionInstructorIDChanging(value);
                    this.RaiseDataMemberChanging("ConversionInstructorID");
                    this._conversionInstructorID = value;
                    this.RaiseDataMemberChanged("ConversionInstructorID");
                    this.OnConversionInstructorIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> ConversionScheduleID
        {
            get
            {
                return this._conversionScheduleID;
            }
            set
            {
                if ((this._conversionScheduleID != value))
                {
                    this.ValidateProperty("ConversionScheduleID", value);
                    this.OnConversionScheduleIDChanging(value);
                    this.RaiseDataMemberChanging("ConversionScheduleID");
                    this._conversionScheduleID = value;
                    this.RaiseDataMemberChanged("ConversionScheduleID");
                    this.OnConversionScheduleIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.ValidateProperty("CreateDate", value);
                    this.OnCreateDateChanging(value);
                    this.RaiseDataMemberChanging("CreateDate");
                    this._createDate = value;
                    this.RaiseDataMemberChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }
        
        [DataMember()]
        public int CreatedByEmpID
        {
            get
            {
                return this._createdByEmpID;
            }
            set
            {
                if ((this._createdByEmpID != value))
                {
                    this.ValidateProperty("CreatedByEmpID", value);
                    this.OnCreatedByEmpIDChanging(value);
                    this.RaiseDataMemberChanging("CreatedByEmpID");
                    this._createdByEmpID = value;
                    this.RaiseDataMemberChanged("CreatedByEmpID");
                    this.OnCreatedByEmpIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> DaysBeforeSendingReminder
        {
            get
            {
                return this._daysBeforeSendingReminder;
            }
            set
            {
                if ((this._daysBeforeSendingReminder != value))
                {
                    this.ValidateProperty("DaysBeforeSendingReminder", value);
                    this.OnDaysBeforeSendingReminderChanging(value);
                    this.RaiseDataMemberChanging("DaysBeforeSendingReminder");
                    this._daysBeforeSendingReminder = value;
                    this.RaiseDataMemberChanged("DaysBeforeSendingReminder");
                    this.OnDaysBeforeSendingReminderChanged();
                }
            }
        }
        
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.ValidateProperty("Description", value);
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        [DataMember()]
        public int EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.ValidateProperty("EventID", value);
                    this.OnEventIDChanging(value);
                    this.RaiseDataMemberChanging("EventID");
                    this._eventID = value;
                    this.RaiseDataMemberChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        [Association("EventType_Occurrence", "EventTypeID", "EventTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public EventType EventType
        {
            get
            {
                if ((this._eventType == null))
                {
                    this._eventType = new EntityRef<EventType>(this, "EventType", this.FilterEventType);
                }
                return this._eventType.Entity;
            }
            set
            {
                EventType previous = this.EventType;
                if ((previous != value))
                {
                    this.ValidateProperty("EventType", value);
                    if ((previous != null))
                    {
                        this._eventType.Entity = null;
                        previous.Occurrences.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EventTypeID = value.EventTypeID;
                    }
                    else
                    {
                        this.EventTypeID = default(int);
                    }
                    this._eventType.Entity = value;
                    if ((value != null))
                    {
                        value.Occurrences.Add(this);
                    }
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [DataMember()]
        public int EventTypeID
        {
            get
            {
                return this._eventTypeID;
            }
            set
            {
                if ((this._eventTypeID != value))
                {
                    this.ValidateProperty("EventTypeID", value);
                    this.OnEventTypeIDChanging(value);
                    this.RaiseDataMemberChanging("EventTypeID");
                    this._eventTypeID = value;
                    this.RaiseDataMemberChanged("EventTypeID");
                    this.OnEventTypeIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<bool> IsAllDay
        {
            get
            {
                return this._isAllDay;
            }
            set
            {
                if ((this._isAllDay != value))
                {
                    this.ValidateProperty("IsAllDay", value);
                    this.OnIsAllDayChanging(value);
                    this.RaiseDataMemberChanging("IsAllDay");
                    this._isAllDay = value;
                    this.RaiseDataMemberChanged("IsAllDay");
                    this.OnIsAllDayChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(255)]
        public string LocationName
        {
            get
            {
                return this._locationName;
            }
            set
            {
                if ((this._locationName != value))
                {
                    this.ValidateProperty("LocationName", value);
                    this.OnLocationNameChanging(value);
                    this.RaiseDataMemberChanging("LocationName");
                    this._locationName = value;
                    this.RaiseDataMemberChanged("LocationName");
                    this.OnLocationNameChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> MaxAttend
        {
            get
            {
                return this._maxAttend;
            }
            set
            {
                if ((this._maxAttend != value))
                {
                    this.ValidateProperty("MaxAttend", value);
                    this.OnMaxAttendChanging(value);
                    this.RaiseDataMemberChanging("MaxAttend");
                    this._maxAttend = value;
                    this.RaiseDataMemberChanged("MaxAttend");
                    this.OnMaxAttendChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                if ((this._modifyDate != value))
                {
                    this.ValidateProperty("ModifyDate", value);
                    this.OnModifyDateChanging(value);
                    this.RaiseDataMemberChanging("ModifyDate");
                    this._modifyDate = value;
                    this.RaiseDataMemberChanged("ModifyDate");
                    this.OnModifyDateChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int OccurrenceID
        {
            get
            {
                return this._occurrenceID;
            }
            set
            {
                if ((this._occurrenceID != value))
                {
                    this.ValidateProperty("OccurrenceID", value);
                    this.OnOccurrenceIDChanging(value);
                    this.RaiseDataMemberChanging("OccurrenceID");
                    this._occurrenceID = value;
                    this.RaiseDataMemberChanged("OccurrenceID");
                    this.OnOccurrenceIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(200)]
        public string OccurrenceName
        {
            get
            {
                return this._occurrenceName;
            }
            set
            {
                if ((this._occurrenceName != value))
                {
                    this.ValidateProperty("OccurrenceName", value);
                    this.OnOccurrenceNameChanging(value);
                    this.RaiseDataMemberChanging("OccurrenceName");
                    this._occurrenceName = value;
                    this.RaiseDataMemberChanged("OccurrenceName");
                    this.OnOccurrenceNameChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<decimal> OrgNo
        {
            get
            {
                return this._orgNo;
            }
            set
            {
                if ((this._orgNo != value))
                {
                    this.ValidateProperty("OrgNo", value);
                    this.OnOrgNoChanging(value);
                    this.RaiseDataMemberChanging("OrgNo");
                    this._orgNo = value;
                    this.RaiseDataMemberChanged("OrgNo");
                    this.OnOrgNoChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(500)]
        public string Recurrence
        {
            get
            {
                return this._recurrence;
            }
            set
            {
                if ((this._recurrence != value))
                {
                    this.ValidateProperty("Recurrence", value);
                    this.OnRecurrenceChanging(value);
                    this.RaiseDataMemberChanging("Recurrence");
                    this._recurrence = value;
                    this.RaiseDataMemberChanged("Recurrence");
                    this.OnRecurrenceChanged();
                }
            }
        }
        
        [Association("Region_Occurrence", "RegionID", "RegionID", IsForeignKey=true)]
        [XmlIgnore()]
        public Region Region
        {
            get
            {
                if ((this._region == null))
                {
                    this._region = new EntityRef<Region>(this, "Region", this.FilterRegion);
                }
                return this._region.Entity;
            }
            set
            {
                Region previous = this.Region;
                if ((previous != value))
                {
                    this.ValidateProperty("Region", value);
                    if ((previous != null))
                    {
                        this._region.Entity = null;
                        previous.Occurrences.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.RegionID = value.RegionID;
                    }
                    else
                    {
                        this.RegionID = default(Nullable<int>);
                    }
                    this._region.Entity = value;
                    if ((value != null))
                    {
                        value.Occurrences.Add(this);
                    }
                    this.RaisePropertyChanged("Region");
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> RegionID
        {
            get
            {
                return this._regionID;
            }
            set
            {
                if ((this._regionID != value))
                {
                    this.ValidateProperty("RegionID", value);
                    this.OnRegionIDChanging(value);
                    this.RaiseDataMemberChanging("RegionID");
                    this._regionID = value;
                    this.RaiseDataMemberChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
        
        [DataMember()]
        public string ReminderBody
        {
            get
            {
                return this._reminderBody;
            }
            set
            {
                if ((this._reminderBody != value))
                {
                    this.ValidateProperty("ReminderBody", value);
                    this.OnReminderBodyChanging(value);
                    this.RaiseDataMemberChanging("ReminderBody");
                    this._reminderBody = value;
                    this.RaiseDataMemberChanged("ReminderBody");
                    this.OnReminderBodyChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(100)]
        public string ReminderSubject
        {
            get
            {
                return this._reminderSubject;
            }
            set
            {
                if ((this._reminderSubject != value))
                {
                    this.ValidateProperty("ReminderSubject", value);
                    this.OnReminderSubjectChanging(value);
                    this.RaiseDataMemberChanging("ReminderSubject");
                    this._reminderSubject = value;
                    this.RaiseDataMemberChanged("ReminderSubject");
                    this.OnReminderSubjectChanged();
                }
            }
        }
        
        [DataMember()]
        public DateTime ScheduleFrom
        {
            get
            {
                return this._scheduleFrom;
            }
            set
            {
                if ((this._scheduleFrom != value))
                {
                    this.ValidateProperty("ScheduleFrom", value);
                    this.OnScheduleFromChanging(value);
                    this.RaiseDataMemberChanging("ScheduleFrom");
                    this._scheduleFrom = value;
                    this.RaiseDataMemberChanged("ScheduleFrom");
                    this.OnScheduleFromChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> ScheduleTo
        {
            get
            {
                return this._scheduleTo;
            }
            set
            {
                if ((this._scheduleTo != value))
                {
                    this.ValidateProperty("ScheduleTo", value);
                    this.OnScheduleToChanging(value);
                    this.RaiseDataMemberChanging("ScheduleTo");
                    this._scheduleTo = value;
                    this.RaiseDataMemberChanged("ScheduleTo");
                    this.OnScheduleToChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<bool> ShowVideoConf
        {
            get
            {
                return this._showVideoConf;
            }
            set
            {
                if ((this._showVideoConf != value))
                {
                    this.ValidateProperty("ShowVideoConf", value);
                    this.OnShowVideoConfChanging(value);
                    this.RaiseDataMemberChanging("ShowVideoConf");
                    this._showVideoConf = value;
                    this.RaiseDataMemberChanged("ShowVideoConf");
                    this.OnShowVideoConfChanged();
                }
            }
        }
        
        [Association("TrainingEvent_Occurrence", "EventID", "EventID", IsForeignKey=true)]
        [XmlIgnore()]
        public TrainingEvent TrainingEvent
        {
            get
            {
                if ((this._trainingEvent == null))
                {
                    this._trainingEvent = new EntityRef<TrainingEvent>(this, "TrainingEvent", this.FilterTrainingEvent);
                }
                return this._trainingEvent.Entity;
            }
            set
            {
                TrainingEvent previous = this.TrainingEvent;
                if ((previous != value))
                {
                    this.ValidateProperty("TrainingEvent", value);
                    if ((previous != null))
                    {
                        this._trainingEvent.Entity = null;
                        previous.Occurrences.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.EventID = value.EventID;
                    }
                    else
                    {
                        this.EventID = default(int);
                    }
                    this._trainingEvent.Entity = value;
                    if ((value != null))
                    {
                        value.Occurrences.Add(this);
                    }
                    this.RaisePropertyChanged("TrainingEvent");
                }
            }
        }
        
        private bool FilterEventType(EventType entity)
        {
            return (entity.EventTypeID == this.EventTypeID);
        }
        
        private bool FilterRegion(Region entity)
        {
            return (entity.RegionID == this.RegionID);
        }
        
        private bool FilterTrainingEvent(TrainingEvent entity)
        {
            return (entity.EventID == this.EventID);
        }
        
        public override object GetIdentity()
        {
            return this._occurrenceID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class Program : Entity
    {
        
        private string _ccEmail;
        
        private Nullable<DateTime> _createDate;
        
        private int _createdByID;
        
        private string _division;
        
        private string _modifyBy;
        
        private Nullable<DateTime> _modifyDate;
        
        private string _officeCode;
        
        private string _programDescription;
        
        private int _programID;
        
        private string _programName;
        
        private EntityCollection<TrainingEvent> _trainingEvents;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCCEmailChanging(string value);
        partial void OnCCEmailChanged();
        partial void OnCreateDateChanging(Nullable<DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreatedByIDChanging(int value);
        partial void OnCreatedByIDChanged();
        partial void OnDivisionChanging(string value);
        partial void OnDivisionChanged();
        partial void OnModifyByChanging(string value);
        partial void OnModifyByChanged();
        partial void OnModifyDateChanging(Nullable<DateTime> value);
        partial void OnModifyDateChanged();
        partial void OnOfficeCodeChanging(string value);
        partial void OnOfficeCodeChanged();
        partial void OnProgramDescriptionChanging(string value);
        partial void OnProgramDescriptionChanged();
        partial void OnProgramIDChanging(int value);
        partial void OnProgramIDChanged();
        partial void OnProgramNameChanging(string value);
        partial void OnProgramNameChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Program()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        [StringLength(50)]
        public string CCEmail
        {
            get
            {
                return this._ccEmail;
            }
            set
            {
                if ((this._ccEmail != value))
                {
                    this.ValidateProperty("CCEmail", value);
                    this.OnCCEmailChanging(value);
                    this.RaiseDataMemberChanging("CCEmail");
                    this._ccEmail = value;
                    this.RaiseDataMemberChanged("CCEmail");
                    this.OnCCEmailChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.ValidateProperty("CreateDate", value);
                    this.OnCreateDateChanging(value);
                    this.RaiseDataMemberChanging("CreateDate");
                    this._createDate = value;
                    this.RaiseDataMemberChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }
        
        [DataMember()]
        public int CreatedByID
        {
            get
            {
                return this._createdByID;
            }
            set
            {
                if ((this._createdByID != value))
                {
                    this.ValidateProperty("CreatedByID", value);
                    this.OnCreatedByIDChanging(value);
                    this.RaiseDataMemberChanging("CreatedByID");
                    this._createdByID = value;
                    this.RaiseDataMemberChanged("CreatedByID");
                    this.OnCreatedByIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(50)]
        public string Division
        {
            get
            {
                return this._division;
            }
            set
            {
                if ((this._division != value))
                {
                    this.ValidateProperty("Division", value);
                    this.OnDivisionChanging(value);
                    this.RaiseDataMemberChanging("Division");
                    this._division = value;
                    this.RaiseDataMemberChanged("Division");
                    this.OnDivisionChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(50)]
        public string ModifyBy
        {
            get
            {
                return this._modifyBy;
            }
            set
            {
                if ((this._modifyBy != value))
                {
                    this.ValidateProperty("ModifyBy", value);
                    this.OnModifyByChanging(value);
                    this.RaiseDataMemberChanging("ModifyBy");
                    this._modifyBy = value;
                    this.RaiseDataMemberChanged("ModifyBy");
                    this.OnModifyByChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                if ((this._modifyDate != value))
                {
                    this.ValidateProperty("ModifyDate", value);
                    this.OnModifyDateChanging(value);
                    this.RaiseDataMemberChanging("ModifyDate");
                    this._modifyDate = value;
                    this.RaiseDataMemberChanged("ModifyDate");
                    this.OnModifyDateChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(50)]
        public string OfficeCode
        {
            get
            {
                return this._officeCode;
            }
            set
            {
                if ((this._officeCode != value))
                {
                    this.ValidateProperty("OfficeCode", value);
                    this.OnOfficeCodeChanging(value);
                    this.RaiseDataMemberChanging("OfficeCode");
                    this._officeCode = value;
                    this.RaiseDataMemberChanged("OfficeCode");
                    this.OnOfficeCodeChanged();
                }
            }
        }
        
        [DataMember()]
        public string ProgramDescription
        {
            get
            {
                return this._programDescription;
            }
            set
            {
                if ((this._programDescription != value))
                {
                    this.ValidateProperty("ProgramDescription", value);
                    this.OnProgramDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ProgramDescription");
                    this._programDescription = value;
                    this.RaiseDataMemberChanged("ProgramDescription");
                    this.OnProgramDescriptionChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int ProgramID
        {
            get
            {
                return this._programID;
            }
            set
            {
                if ((this._programID != value))
                {
                    this.ValidateProperty("ProgramID", value);
                    this.OnProgramIDChanging(value);
                    this.RaiseDataMemberChanging("ProgramID");
                    this._programID = value;
                    this.RaiseDataMemberChanged("ProgramID");
                    this.OnProgramIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(100)]
        public string ProgramName
        {
            get
            {
                return this._programName;
            }
            set
            {
                if ((this._programName != value))
                {
                    this.ValidateProperty("ProgramName", value);
                    this.OnProgramNameChanging(value);
                    this.RaiseDataMemberChanging("ProgramName");
                    this._programName = value;
                    this.RaiseDataMemberChanged("ProgramName");
                    this.OnProgramNameChanged();
                }
            }
        }
        
        [Association("Program_TrainingEvent", "ProgramID", "ProgramID")]
        [XmlIgnore()]
        public EntityCollection<TrainingEvent> TrainingEvents
        {
            get
            {
                if ((this._trainingEvents == null))
                {
                    this._trainingEvents = new EntityCollection<TrainingEvent>(this, "TrainingEvents", this.FilterTrainingEvents, this.AttachTrainingEvents, this.DetachTrainingEvents);
                }
                return this._trainingEvents;
            }
        }
        
        private void AttachTrainingEvents(TrainingEvent entity)
        {
            entity.Program = this;
        }
        
        private void DetachTrainingEvents(TrainingEvent entity)
        {
            entity.Program = null;
        }
        
        private bool FilterTrainingEvents(TrainingEvent entity)
        {
            return (entity.ProgramID == this.ProgramID);
        }
        
        public override object GetIdentity()
        {
            return this._programID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class Region : Entity
    {
        
        private EntityCollection<Occurrence> _occurrences;
        
        private string _regionFullName;
        
        private int _regionID;
        
        private string _regionName;
        
        private int _timeZoneID;
        
        private string _timeZoneName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnRegionFullNameChanging(string value);
        partial void OnRegionFullNameChanged();
        partial void OnRegionIDChanging(int value);
        partial void OnRegionIDChanged();
        partial void OnRegionNameChanging(string value);
        partial void OnRegionNameChanged();
        partial void OnTimeZoneIDChanging(int value);
        partial void OnTimeZoneIDChanged();
        partial void OnTimeZoneNameChanging(string value);
        partial void OnTimeZoneNameChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Region()
        {
            this.OnCreated();
        }
        
        [Association("Region_Occurrence", "RegionID", "RegionID")]
        [XmlIgnore()]
        public EntityCollection<Occurrence> Occurrences
        {
            get
            {
                if ((this._occurrences == null))
                {
                    this._occurrences = new EntityCollection<Occurrence>(this, "Occurrences", this.FilterOccurrences, this.AttachOccurrences, this.DetachOccurrences);
                }
                return this._occurrences;
            }
        }
        
        [DataMember()]
        [StringLength(100)]
        public string RegionFullName
        {
            get
            {
                return this._regionFullName;
            }
            set
            {
                if ((this._regionFullName != value))
                {
                    this.ValidateProperty("RegionFullName", value);
                    this.OnRegionFullNameChanging(value);
                    this.RaiseDataMemberChanging("RegionFullName");
                    this._regionFullName = value;
                    this.RaiseDataMemberChanged("RegionFullName");
                    this.OnRegionFullNameChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int RegionID
        {
            get
            {
                return this._regionID;
            }
            set
            {
                if ((this._regionID != value))
                {
                    this.ValidateProperty("RegionID", value);
                    this.OnRegionIDChanging(value);
                    this.RaiseDataMemberChanging("RegionID");
                    this._regionID = value;
                    this.RaiseDataMemberChanged("RegionID");
                    this.OnRegionIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(50)]
        public string RegionName
        {
            get
            {
                return this._regionName;
            }
            set
            {
                if ((this._regionName != value))
                {
                    this.ValidateProperty("RegionName", value);
                    this.OnRegionNameChanging(value);
                    this.RaiseDataMemberChanging("RegionName");
                    this._regionName = value;
                    this.RaiseDataMemberChanged("RegionName");
                    this.OnRegionNameChanged();
                }
            }
        }
        
        [DataMember()]
        public int TimeZoneID
        {
            get
            {
                return this._timeZoneID;
            }
            set
            {
                if ((this._timeZoneID != value))
                {
                    this.ValidateProperty("TimeZoneID", value);
                    this.OnTimeZoneIDChanging(value);
                    this.RaiseDataMemberChanging("TimeZoneID");
                    this._timeZoneID = value;
                    this.RaiseDataMemberChanged("TimeZoneID");
                    this.OnTimeZoneIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(100)]
        public string TimeZoneName
        {
            get
            {
                return this._timeZoneName;
            }
            set
            {
                if ((this._timeZoneName != value))
                {
                    this.ValidateProperty("TimeZoneName", value);
                    this.OnTimeZoneNameChanging(value);
                    this.RaiseDataMemberChanging("TimeZoneName");
                    this._timeZoneName = value;
                    this.RaiseDataMemberChanged("TimeZoneName");
                    this.OnTimeZoneNameChanged();
                }
            }
        }
        
        private void AttachOccurrences(Occurrence entity)
        {
            entity.Region = this;
        }
        
        private void DetachOccurrences(Occurrence entity)
        {
            entity.Region = null;
        }
        
        private bool FilterOccurrences(Occurrence entity)
        {
            return (entity.RegionID == this.RegionID);
        }
        
        public override object GetIdentity()
        {
            return this._regionID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _password;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.ValidateProperty("Answer", value);
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.ValidateProperty("Email", value);
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.ValidateProperty("FriendlyName", value);
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Description="PasswordDescription", Name="PasswordLabel", Order=3, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ErrorResources), MinimumLength=7)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.ValidateProperty("Password", value);
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.ValidateProperty("Question", value);
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ErrorResources))]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.ValidateProperty("UserName", value);
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        public override object GetIdentity()
        {
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class TrainingEvent : Entity
    {
        
        private Nullable<DateTime> _createDate;
        
        private int _createdByID;
        
        private Nullable<int> _daysBeforeSendingInvite;
        
        private Nullable<bool> _emailSent;
        
        private int _eventID;
        
        private string _eventName;
        
        private string _inviteEmailBody;
        
        private string _inviteEmailSubject;
        
        private bool _isActive;
        
        private bool _isPublic;
        
        private string _modifyBy;
        
        private Nullable<DateTime> _modifyDate;
        
        private EntityCollection<Occurrence> _occurrences;
        
        private Nullable<decimal> _orgNo;
        
        private EntityRef<Program> _program;
        
        private int _programID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCreateDateChanging(Nullable<DateTime> value);
        partial void OnCreateDateChanged();
        partial void OnCreatedByIDChanging(int value);
        partial void OnCreatedByIDChanged();
        partial void OnDaysBeforeSendingInviteChanging(Nullable<int> value);
        partial void OnDaysBeforeSendingInviteChanged();
        partial void OnEmailSentChanging(Nullable<bool> value);
        partial void OnEmailSentChanged();
        partial void OnEventIDChanging(int value);
        partial void OnEventIDChanged();
        partial void OnEventNameChanging(string value);
        partial void OnEventNameChanged();
        partial void OnInviteEmailBodyChanging(string value);
        partial void OnInviteEmailBodyChanged();
        partial void OnInviteEmailSubjectChanging(string value);
        partial void OnInviteEmailSubjectChanged();
        partial void OnIsActiveChanging(bool value);
        partial void OnIsActiveChanged();
        partial void OnIsPublicChanging(bool value);
        partial void OnIsPublicChanged();
        partial void OnModifyByChanging(string value);
        partial void OnModifyByChanged();
        partial void OnModifyDateChanging(Nullable<DateTime> value);
        partial void OnModifyDateChanged();
        partial void OnOrgNoChanging(Nullable<decimal> value);
        partial void OnOrgNoChanged();
        partial void OnProgramIDChanging(int value);
        partial void OnProgramIDChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public TrainingEvent()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public Nullable<DateTime> CreateDate
        {
            get
            {
                return this._createDate;
            }
            set
            {
                if ((this._createDate != value))
                {
                    this.ValidateProperty("CreateDate", value);
                    this.OnCreateDateChanging(value);
                    this.RaiseDataMemberChanging("CreateDate");
                    this._createDate = value;
                    this.RaiseDataMemberChanged("CreateDate");
                    this.OnCreateDateChanged();
                }
            }
        }
        
        [DataMember()]
        public int CreatedByID
        {
            get
            {
                return this._createdByID;
            }
            set
            {
                if ((this._createdByID != value))
                {
                    this.ValidateProperty("CreatedByID", value);
                    this.OnCreatedByIDChanging(value);
                    this.RaiseDataMemberChanging("CreatedByID");
                    this._createdByID = value;
                    this.RaiseDataMemberChanged("CreatedByID");
                    this.OnCreatedByIDChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<int> DaysBeforeSendingInvite
        {
            get
            {
                return this._daysBeforeSendingInvite;
            }
            set
            {
                if ((this._daysBeforeSendingInvite != value))
                {
                    this.ValidateProperty("DaysBeforeSendingInvite", value);
                    this.OnDaysBeforeSendingInviteChanging(value);
                    this.RaiseDataMemberChanging("DaysBeforeSendingInvite");
                    this._daysBeforeSendingInvite = value;
                    this.RaiseDataMemberChanged("DaysBeforeSendingInvite");
                    this.OnDaysBeforeSendingInviteChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<bool> EmailSent
        {
            get
            {
                return this._emailSent;
            }
            set
            {
                if ((this._emailSent != value))
                {
                    this.ValidateProperty("EmailSent", value);
                    this.OnEmailSentChanging(value);
                    this.RaiseDataMemberChanging("EmailSent");
                    this._emailSent = value;
                    this.RaiseDataMemberChanged("EmailSent");
                    this.OnEmailSentChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public int EventID
        {
            get
            {
                return this._eventID;
            }
            set
            {
                if ((this._eventID != value))
                {
                    this.ValidateProperty("EventID", value);
                    this.OnEventIDChanging(value);
                    this.RaiseDataMemberChanging("EventID");
                    this._eventID = value;
                    this.RaiseDataMemberChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(500)]
        public string EventName
        {
            get
            {
                return this._eventName;
            }
            set
            {
                if ((this._eventName != value))
                {
                    this.ValidateProperty("EventName", value);
                    this.OnEventNameChanging(value);
                    this.RaiseDataMemberChanging("EventName");
                    this._eventName = value;
                    this.RaiseDataMemberChanged("EventName");
                    this.OnEventNameChanged();
                }
            }
        }
        
        [DataMember()]
        public string InviteEmailBody
        {
            get
            {
                return this._inviteEmailBody;
            }
            set
            {
                if ((this._inviteEmailBody != value))
                {
                    this.ValidateProperty("InviteEmailBody", value);
                    this.OnInviteEmailBodyChanging(value);
                    this.RaiseDataMemberChanging("InviteEmailBody");
                    this._inviteEmailBody = value;
                    this.RaiseDataMemberChanged("InviteEmailBody");
                    this.OnInviteEmailBodyChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(500)]
        public string InviteEmailSubject
        {
            get
            {
                return this._inviteEmailSubject;
            }
            set
            {
                if ((this._inviteEmailSubject != value))
                {
                    this.ValidateProperty("InviteEmailSubject", value);
                    this.OnInviteEmailSubjectChanging(value);
                    this.RaiseDataMemberChanging("InviteEmailSubject");
                    this._inviteEmailSubject = value;
                    this.RaiseDataMemberChanged("InviteEmailSubject");
                    this.OnInviteEmailSubjectChanged();
                }
            }
        }
        
        [DataMember()]
        public bool IsActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                if ((this._isActive != value))
                {
                    this.ValidateProperty("IsActive", value);
                    this.OnIsActiveChanging(value);
                    this.RaiseDataMemberChanging("IsActive");
                    this._isActive = value;
                    this.RaiseDataMemberChanged("IsActive");
                    this.OnIsActiveChanged();
                }
            }
        }
        
        [DataMember()]
        public bool IsPublic
        {
            get
            {
                return this._isPublic;
            }
            set
            {
                if ((this._isPublic != value))
                {
                    this.ValidateProperty("IsPublic", value);
                    this.OnIsPublicChanging(value);
                    this.RaiseDataMemberChanging("IsPublic");
                    this._isPublic = value;
                    this.RaiseDataMemberChanged("IsPublic");
                    this.OnIsPublicChanged();
                }
            }
        }
        
        [DataMember()]
        [StringLength(50)]
        public string ModifyBy
        {
            get
            {
                return this._modifyBy;
            }
            set
            {
                if ((this._modifyBy != value))
                {
                    this.ValidateProperty("ModifyBy", value);
                    this.OnModifyByChanging(value);
                    this.RaiseDataMemberChanging("ModifyBy");
                    this._modifyBy = value;
                    this.RaiseDataMemberChanged("ModifyBy");
                    this.OnModifyByChanged();
                }
            }
        }
        
        [DataMember()]
        public Nullable<DateTime> ModifyDate
        {
            get
            {
                return this._modifyDate;
            }
            set
            {
                if ((this._modifyDate != value))
                {
                    this.ValidateProperty("ModifyDate", value);
                    this.OnModifyDateChanging(value);
                    this.RaiseDataMemberChanging("ModifyDate");
                    this._modifyDate = value;
                    this.RaiseDataMemberChanged("ModifyDate");
                    this.OnModifyDateChanged();
                }
            }
        }
        
        [Association("TrainingEvent_Occurrence", "EventID", "EventID")]
        [XmlIgnore()]
        public EntityCollection<Occurrence> Occurrences
        {
            get
            {
                if ((this._occurrences == null))
                {
                    this._occurrences = new EntityCollection<Occurrence>(this, "Occurrences", this.FilterOccurrences, this.AttachOccurrences, this.DetachOccurrences);
                }
                return this._occurrences;
            }
        }
        
        [DataMember()]
        public Nullable<decimal> OrgNo
        {
            get
            {
                return this._orgNo;
            }
            set
            {
                if ((this._orgNo != value))
                {
                    this.ValidateProperty("OrgNo", value);
                    this.OnOrgNoChanging(value);
                    this.RaiseDataMemberChanging("OrgNo");
                    this._orgNo = value;
                    this.RaiseDataMemberChanged("OrgNo");
                    this.OnOrgNoChanged();
                }
            }
        }
        
        [Association("Program_TrainingEvent", "ProgramID", "ProgramID", IsForeignKey=true)]
        [XmlIgnore()]
        public Program Program
        {
            get
            {
                if ((this._program == null))
                {
                    this._program = new EntityRef<Program>(this, "Program", this.FilterProgram);
                }
                return this._program.Entity;
            }
            set
            {
                Program previous = this.Program;
                if ((previous != value))
                {
                    this.ValidateProperty("Program", value);
                    if ((previous != null))
                    {
                        this._program.Entity = null;
                        previous.TrainingEvents.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ProgramID = value.ProgramID;
                    }
                    else
                    {
                        this.ProgramID = default(int);
                    }
                    this._program.Entity = value;
                    if ((value != null))
                    {
                        value.TrainingEvents.Add(this);
                    }
                    this.RaisePropertyChanged("Program");
                }
            }
        }
        
        [DataMember()]
        public int ProgramID
        {
            get
            {
                return this._programID;
            }
            set
            {
                if ((this._programID != value))
                {
                    this.ValidateProperty("ProgramID", value);
                    this.OnProgramIDChanging(value);
                    this.RaiseDataMemberChanging("ProgramID");
                    this._programID = value;
                    this.RaiseDataMemberChanged("ProgramID");
                    this.OnProgramIDChanged();
                }
            }
        }
        
        private void AttachOccurrences(Occurrence entity)
        {
            entity.TrainingEvent = this;
        }
        
        private void DetachOccurrences(Occurrence entity)
        {
            entity.TrainingEvent = null;
        }
        
        private bool FilterOccurrences(Occurrence entity)
        {
            return (entity.EventID == this.EventID);
        }
        
        private bool FilterProgram(Program entity)
        {
            return (entity.ProgramID == this.ProgramID);
        }
        
        public override object GetIdentity()
        {
            return this._eventID;
        }
    }
    
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TERSApplication.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.ValidateProperty("FriendlyName", value);
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        [DataMember()]
        [Key()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.ValidateProperty("Name", value);
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.ValidateProperty("Roles", value);
                    this.OnRolesChanging(value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("TERSApplication-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The UserRegistrationService data service URI.
        /// </param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetUsers'.
        /// </summary>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/SubmitChanges", ReplyAction="http://tempuri.org/UserRegistrationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.Add);
            }
        }
    }
}
namespace TERSApplication.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.Web.Ria.Data;
    using System.Windows.Ria;
    using System.Windows.Ria.Services;
    using TERSApplication.Web;
    
    
    public sealed partial class EventServices : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public EventServices() : 
                this(new WebDomainClient<IEventServicesContract>(new Uri("TERSApplication-Web-Services-EventServices.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a data service URI.
        /// </summary>
        /// <param name="serviceUri">
        /// The EventServices data service URI.
        /// </param>
        public EventServices(Uri serviceUri) : 
                this(new WebDomainClient<IEventServicesContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Constructor used to specify a DomainClient instance.
        /// </summary>
        /// <param name="domainClient">
        /// The DomainClient instance the DomainContext should use.
        /// </param>
        public EventServices(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        public EntitySet<EventType> EventTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EventType>();
            }
        }
        
        public EntitySet<Occurrence> Occurrences
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Occurrence>();
            }
        }
        
        public EntitySet<Program> Programs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Program>();
            }
        }
        
        public EntitySet<Region> Regions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Region>();
            }
        }
        
        public EntitySet<TrainingEvent> TrainingEvents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TrainingEvent>();
            }
        }
        
        public EntitySet<EventReadOnly> EventReadOnlies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<EventReadOnly>();
            }
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetEventTypes'.
        /// </summary>
        public EntityQuery<EventType> GetEventTypesQuery()
        {
            this.ValidateMethod("GetEventTypesQuery", null);
            return base.CreateQuery<EventType>("GetEventTypes", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetOccurrences'.
        /// </summary>
        public EntityQuery<Occurrence> GetOccurrencesQuery()
        {
            this.ValidateMethod("GetOccurrencesQuery", null);
            return base.CreateQuery<Occurrence>("GetOccurrences", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetPrograms'.
        /// </summary>
        public EntityQuery<Program> GetProgramsQuery()
        {
            this.ValidateMethod("GetProgramsQuery", null);
            return base.CreateQuery<Program>("GetPrograms", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetRegions'.
        /// </summary>
        public EntityQuery<Region> GetRegionsQuery()
        {
            this.ValidateMethod("GetRegionsQuery", null);
            return base.CreateQuery<Region>("GetRegions", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetTrainingEvents'.
        /// </summary>
        public EntityQuery<TrainingEvent> GetTrainingEventsQuery()
        {
            this.ValidateMethod("GetTrainingEventsQuery", null);
            return base.CreateQuery<TrainingEvent>("GetTrainingEvents", null, false, true);
        }
        
        /// <summary>
        /// Returns an EntityQuery for query operation 'GetTrainingEventsreadOnlyBindable'.
        /// </summary>
        public EntityQuery<EventReadOnly> GetTrainingEventsreadOnlyBindableQuery()
        {
            this.ValidateMethod("GetTrainingEventsreadOnlyBindableQuery", null);
            return base.CreateQuery<EventReadOnly>("GetTrainingEventsreadOnlyBindable", null, false, true);
        }
        
        protected override EntityContainer CreateEntityContainer()
        {
            return new EventServicesEntityContainer();
        }
        
        [ServiceContract()]
        public interface IEventServicesContract
        {
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventServices/GetEventTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventServices/GetEventTypes", ReplyAction="http://tempuri.org/EventServices/GetEventTypesResponse")]
            IAsyncResult BeginGetEventTypes(AsyncCallback callback, object asyncState);
            
            QueryResult<EventType> EndGetEventTypes(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventServices/GetOccurrencesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventServices/GetOccurrences", ReplyAction="http://tempuri.org/EventServices/GetOccurrencesResponse")]
            IAsyncResult BeginGetOccurrences(AsyncCallback callback, object asyncState);
            
            QueryResult<Occurrence> EndGetOccurrences(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventServices/GetProgramsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventServices/GetPrograms", ReplyAction="http://tempuri.org/EventServices/GetProgramsResponse")]
            IAsyncResult BeginGetPrograms(AsyncCallback callback, object asyncState);
            
            QueryResult<Program> EndGetPrograms(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventServices/GetRegionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventServices/GetRegions", ReplyAction="http://tempuri.org/EventServices/GetRegionsResponse")]
            IAsyncResult BeginGetRegions(AsyncCallback callback, object asyncState);
            
            QueryResult<Region> EndGetRegions(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventServices/GetTrainingEventsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventServices/GetTrainingEvents", ReplyAction="http://tempuri.org/EventServices/GetTrainingEventsResponse")]
            IAsyncResult BeginGetTrainingEvents(AsyncCallback callback, object asyncState);
            
            QueryResult<TrainingEvent> EndGetTrainingEvents(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventServices/GetTrainingEventsreadOnlyBindableDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventServices/GetTrainingEventsreadOnlyBindable", ReplyAction="http://tempuri.org/EventServices/GetTrainingEventsreadOnlyBindableResponse")]
            IAsyncResult BeginGetTrainingEventsreadOnlyBindable(AsyncCallback callback, object asyncState);
            
            QueryResult<EventReadOnly> EndGetTrainingEventsreadOnlyBindable(IAsyncResult result);
            
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/EventServices/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/EventServices/SubmitChanges", ReplyAction="http://tempuri.org/EventServices/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class EventServicesEntityContainer : EntityContainer
        {
            
            public EventServicesEntityContainer()
            {
                this.CreateEntitySet<EventReadOnly>(EntitySetOperations.None);
                this.CreateEntitySet<EventType>(EntitySetOperations.None);
                this.CreateEntitySet<Occurrence>(EntitySetOperations.None);
                this.CreateEntitySet<Program>(EntitySetOperations.None);
                this.CreateEntitySet<Region>(EntitySetOperations.None);
                this.CreateEntitySet<TrainingEvent>(EntitySetOperations.None);
            }
        }
    }
}
